{"version":3,"sources":["components/Dias/style.js","components/Dias/Dias.js","components/Header/style.js","components/Header/Header.js","style.js","App.js","serviceWorker.js","index.js"],"names":["Main","styled","main","ListaTarefas","p","completa","ListItemText","Dias","useState","tarefas","setTarefas","tarefaCompleta","setTarefaCompleta","tarefaPronta","id","map","tarefa","body","axios","put","then","response","console","log","editarTarefa","useEffect","get","data","catch","error","window","alert","StylesProvider","injectFirst","dia","diaCopia","key","day","ListItem","onClick","button","primary","text","InputNovaTarefa","TextField","Menu","Select","BotaoNovaTarefa","Button","Header","diaDaSemana","setDiaDaSemana","novaTarefa","setNovaTarefa","onChange","event","target","value","label","variant","size","color","FormControl","InputLabel","MenuItem","post","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.949d0c38.chunk.js","sourcesContent":["import styled from 'styled-components'\r\nimport ListItemText from '@material-ui/core/ListItemText'\r\n\r\n\r\nexport const Main = styled.main`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  h3 {\r\n    color: red;\r\n    margin-left: 16px;\r\n  }\r\n  section {\r\n    display: flex;\r\n    flex-direction: column;\r\n    height: 500px;\r\n    width: 200px;\r\n    border: 1px dotted black;\r\n  }\r\n`\r\n\r\nexport const Tarefa = styled.p`\r\n  color: ${({completa}) => (completa ? 'green' : 'none')};\r\n  text-decoration: ${({ completa }) => (completa ? 'line-through' : 'none')};\r\n`\r\n\r\nexport const ListaTarefas = styled(ListItemText)`\r\n  .MuiListItemText-primary {\r\n    text-decoration: ${({ completa }) => (completa ? 'line-through' : 'none')};\r\n  }\r\n`\r\n","import React, { useState, useEffect } from 'react'\r\nimport {StylesProvider} from '@material-ui/core/styles'\r\nimport axios from 'axios'\r\nimport ListItem from '@material-ui/core/ListItem'\r\nimport ListItemText from '@material-ui/core/ListItemText'\r\nimport styled from 'styled-components'\r\nimport {\r\n  Main,\r\n  Tarefa,\r\n  ListaTarefas\r\n} from './style'\r\n\r\nfunction Dias () {\r\n  const [tarefas, setTarefas] = useState([])\r\n  const [tarefaCompleta, setTarefaCompleta] = useState(true)\r\n\r\n  function getTarefas() {\r\n    axios.get('https://us-central1-labenu-apis.cloudfunctions.net/generic/planner-mello-paulo')\r\n      .then((response) => {\r\n        setTarefas(response.data)\r\n      })\r\n      .catch((error) => {\r\n        window.alert(error)\r\n      })\r\n  }\r\n\r\n  function editarTarefa(id) {\r\n      setTarefaCompleta(!tarefaCompleta)\r\n      const body = {\r\n        completa: tarefaCompleta\r\n      }\r\n    axios.put('https://us-central1-labenu-apis.cloudfunctions.net/generic/planner-mello-paulo/' + id, body)\r\n      .then((response) => {\r\n        console.log(tarefaCompleta)\r\n      })\r\n  }\r\n\r\n  function deleteTarefa(id) {\r\n    axios.delete('https://us-central1-labenu-apis.cloudfunctions.net/generic/planner-mello-paulo/' + id)\r\n      .then((response) => {\r\n        window.alert('tarefa excluída')\r\n      })\r\n      .catch((error) => {\r\n        window.alert(error)\r\n      })\r\n  }\r\n\r\n  useEffect(() => {\r\n    getTarefas()\r\n  }, [tarefas])\r\n\r\n  function tarefaPronta(id) {\r\n    tarefas.map((tarefa) => {\r\n      if(tarefa.id === id) {\r\n        editarTarefa(id)\r\n      }\r\n    })\r\n    console.log(tarefas)\r\n  }\r\n\r\n\r\n  const diasDaSemana = ['Segunda', 'Terça', 'Quarta', 'Quinta', 'Sexta', 'Sábado', 'Domingo']\r\n  \r\n  return (\r\n    <StylesProvider injectFirst>\r\n      <Main>\r\n        {diasDaSemana.map((dia) => {\r\n          const diaCopia = dia\r\n          return (\r\n            <section key={dia}>\r\n            <h3>{dia}</h3>\r\n            {tarefas.map((tarefa) => {\r\n              return(\r\n                tarefa.day === diaCopia &&\r\n                <ListItem  onClick={() => tarefaPronta(tarefa.id)} button>\r\n                  <ListaTarefas completa={tarefa.completa} primary={tarefa.text} />\r\n                </ListItem>)\r\n            })}\r\n          </section>\r\n          )\r\n        })}\r\n      </Main>\r\n    </StylesProvider>\r\n  )\r\n}\r\n\r\nexport default Dias","import styled from 'styled-components'\r\nimport { TextField, Select, Button } from '@material-ui/core';\r\n\r\nexport const Main = styled.main`\r\n  display: flex;\r\n  height: 60px;\r\n  justify-content: center;\r\n  align-items: center;\r\n  box-shadow: 0px 0px 7px 3px rgba(0,0,0,0.26);\r\n  section {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-around;\r\n    width: 600px;\r\n  }\r\n`\r\nexport const InputNovaTarefa = styled(TextField)`\r\n  \r\n`\r\nexport const Menu = styled(Select)`\r\n  margin-bottom: 15px;\r\n  width: 150px;\r\n`\r\nexport const BotaoNovaTarefa = styled(Button)`\r\n    color: #ffffff;\r\n    background: #FE6B8B;\r\n    border-radius: 3;\r\n    border: 0;\r\n    box-shadow: 0 3px 5px 2px rgba(255, 105, 135, .3);\r\n    transition: 0.5;\r\n    :hover {\r\n      background: #FF8E53;\r\n    }\r\n`","import React, { useState, useEffect } from 'react'\r\nimport {StylesProvider} from '@material-ui/core/styles'\r\nimport { TextField, Select, MenuItem, InputLabel, FormControl } from '@material-ui/core';\r\nimport {\r\n  Main,\r\n  InputNovaTarefa,\r\n  Menu,\r\n  BotaoNovaTarefa\r\n} from './style'\r\nimport axios from 'axios';\r\n\r\nfunction Header() {\r\n  const [diaDaSemana, setDiaDaSemana] = useState('')\r\n  const [novaTarefa, setNovaTarefa] = useState('')\r\n\r\n  function onChangeMenu(event) {\r\n    setDiaDaSemana(event.target.value)\r\n  }\r\n\r\n  function onChangeInput(event) {\r\n    setNovaTarefa(event.target.value)\r\n  }\r\n\r\n  function onClickCriarTarefa() {\r\n    const body = {\r\n      text: novaTarefa,\r\n      day: diaDaSemana,\r\n      completa: false\r\n    }\r\n    axios.post('https://us-central1-labenu-apis.cloudfunctions.net/generic/planner-mello-paulo', body)\r\n      .then((response) => {\r\n        setNovaTarefa('')\r\n        window.alert(\"tarefa criada com sucesso\")\r\n      })\r\n      .catch((error) => {\r\n        window.alert(error)\r\n      })\r\n  }\r\n\r\n  const diasDaSemana = ['Segunda', 'Terça', 'Quarta', 'Quinta', 'Sexta', 'Sábado', 'Domingo']\r\n  return(\r\n    <StylesProvider injectFirst>\r\n    <Main>\r\n    <section>\r\n      <InputNovaTarefa \r\n        onChange={onChangeInput}\r\n        value={novaTarefa}\r\n        label='nova tarefa' \r\n        variant='outlined' \r\n        size='small' \r\n        color='secondary.main'\r\n      />\r\n      <FormControl>\r\n        <InputLabel>Dia da semana</InputLabel>\r\n        <Menu value={diaDaSemana} onChange={onChangeMenu}>\r\n          {diasDaSemana.map((dia) => {\r\n            return (\r\n            <MenuItem key={dia} value={dia}>{dia}</MenuItem>\r\n            )\r\n          })}\r\n        </Menu>\r\n      </FormControl>\r\n      <BotaoNovaTarefa onClick={onClickCriarTarefa}>Criar tarefa</BotaoNovaTarefa>\r\n    </section>\r\n    </Main>\r\n    </StylesProvider>\r\n  )\r\n}\r\n\r\nexport default Header","import styled from 'styled-components'\r\n\r\nexport const Main = styled.main`\r\n  section {\r\n    display: flex;\r\n  }\r\n`","import React from 'react';\nimport Dias from './components/Dias/Dias';\nimport Header from './components/Header/Header'\nimport {\n  Main\n} from './style'\n\nfunction App() {\n  const tarefas = ['tarefa 1', 'tarefa 2', 'tarefa 3']\n  return (\n   <Main>\n    <Header/>\n    <section>\n      <Dias />\n    </section>\n   </Main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}