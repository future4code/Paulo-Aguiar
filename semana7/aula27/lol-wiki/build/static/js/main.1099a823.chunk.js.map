{"version":3,"sources":["components/ChampionList.js","components/ChampionDetail.js","App.js","serviceWorker.js","index.js"],"names":["ChampionList","state","championsNames","championId","championTitle","championImage","champDetailsPage","getChampionId","event","setState","championName","target","value","map","champion","name","key","title","image","full","getChampionList","axios","get","then","response","Object","values","data","catch","error","window","alert","this","console","log","onChange","disabled","selected","onClick","alt","src","React","Component","ChampionDetail","getChampionDetail","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"oQAGqBA,E,4MACnBC,MAAQ,CACNC,eAAgB,GAChBC,WAAY,GACZC,cAAe,GACfC,cAAe,GACfC,kBAAkB,G,EAOpBC,cAAgB,SAACC,GACf,EAAKC,SAAS,CAACH,kBAAkB,IACjC,IAAMI,EAAeF,EAAMG,OAAOC,MAClC,EAAKX,MAAMC,eAAeW,KAAI,SAACC,GAC1BJ,IAAiBI,EAASC,OAC3B,EAAKN,SAAS,CAACN,WAAYW,EAASE,MACpC,EAAKP,SAAS,CAACL,cAAeU,EAASG,QACvC,EAAKR,SAAS,CAACJ,cAAeS,EAASI,MAAMC,Y,EAKnDC,gBAAkB,WAChBC,IAAMC,IAAI,2EACPC,MAAK,SAACC,GACL,EAAKf,SAAS,CAACP,eAAgBuB,OAAOC,OAAOF,EAASG,KAAKA,WAE5DC,OAAM,SAACC,GACNC,OAAOC,MAAMF,O,kEArBjBG,KAAKZ,oB,+BAyBK,IAAD,OAIT,OAHEa,QAAQC,IAAIF,KAAK/B,MAAMC,gBACvB+B,QAAQC,IAAIF,KAAK/B,MAAME,YACvB8B,QAAQC,IAAIF,KAAK/B,MAAMI,eAEvB,8BACE,4BAAQ8B,SAAUH,KAAKzB,eACrB,4BAAQ6B,UAAQ,EAACC,UAAQ,GAAzB,kCACAL,KAAK/B,MAAMC,eAAeW,KAAI,SAACC,GAC9B,OACC,4BAAQwB,QAAS,kBAAM,EAAK/B,cAAcO,EAASE,MAAMA,IAAKF,EAASE,KAAMF,EAASC,UAIzFiB,KAAK/B,MAAMK,kBACZ,6BACC,kDACA,yBAAKiC,IAAI,WAAWC,IAAKR,KAAK/B,MAAMI,gBACpC,4DACA,2BAAI2B,KAAK/B,MAAMG,qB,GAtDkBqC,IAAMC,WCC3BC,E,4MAEnBC,kBAAoB,a,uDAKlB,OACE,kBAAC,EAAD,U,GARsCH,IAAMC,WCQnCG,E,uKAPX,OACE,8BACE,kBAAC,EAAD,W,GAJUJ,IAAMC,WCSJI,QACW,cAA7BhB,OAAOiB,SAASC,UAEe,UAA7BlB,OAAOiB,SAASC,UAEhBlB,OAAOiB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlC,MAAK,SAAAmC,GACJA,EAAaC,gBAEd/B,OAAM,SAAAC,GACLI,QAAQJ,MAAMA,EAAM+B,c","file":"static/js/main.1099a823.chunk.js","sourcesContent":["import React from 'react'\r\nimport axios from 'axios'\r\n\r\nexport default class ChampionList extends React.Component {\r\n  state = {\r\n    championsNames: [],\r\n    championId: '',\r\n    championTitle: '',\r\n    championImage: '',\r\n    champDetailsPage: false\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getChampionList()\r\n  }\r\n\r\n  getChampionId = (event) => {\r\n    this.setState({champDetailsPage: true})\r\n    const championName = event.target.value\r\n    this.state.championsNames.map((champion) => {\r\n      if(championName === champion.name) {\r\n        this.setState({championId: champion.key})\r\n        this.setState({championTitle: champion.title})\r\n        this.setState({championImage: champion.image.full})\r\n      }\r\n    })\r\n  }\r\n\r\n  getChampionList = () => {\r\n    axios.get('http://ddragon.leagueoflegends.com/cdn/10.11.1/data/pt_BR/champion.json')\r\n      .then((response) => {\r\n        this.setState({championsNames: Object.values(response.data.data)})\r\n      })\r\n      .catch((error) => {\r\n        window.alert(error)\r\n      })\r\n    }\r\n    \r\n    render() {\r\n      console.log(this.state.championsNames)\r\n      console.log(this.state.championId)\r\n      console.log(this.state.championImage)\r\n    return(\r\n      <main>\r\n        <select onChange={this.getChampionId}>\r\n          <option disabled selected>Escolha um campeão da lista</option>\r\n         {this.state.championsNames.map((champion) => {\r\n           return(\r\n            <option onClick={() => this.getChampionId(champion.key)} key={champion.key}>{champion.name}</option>\r\n           )\r\n         })}\r\n        </select>\r\n        {this.state.champDetailsPage &&\r\n        <div>\r\n         <h3>Sobre o campeão</h3>\r\n         <img alt='champion' src={this.state.championImage} />\r\n         <h4>Também conhecido(a) como:</h4> \r\n         <p>{this.state.championTitle}</p>\r\n        </div>}\r\n      </main>\r\n    )\r\n  }\r\n}","import React from 'react'\r\nimport axios from 'axios'\r\nimport ChampionList from './ChampionList'\r\n\r\nexport default class ChampionDetail extends React.Component {\r\n\r\n  getChampionDetail = () => {\r\n\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <ChampionList \r\n        \r\n      />\r\n    )\r\n  }\r\n}","import React from 'react';\nimport ChampionDetail from './components/ChampionDetail'\n\nclass App extends React.Component {\n  render() {\n    return (\n      <main>\n        <ChampionDetail />\n      </main>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}